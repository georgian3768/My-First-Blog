//  Install python
//  make dir for proj <djangogirls>
//  create virtual environment in proj dir <venv1> (python -m venv venv1)
//  Start Virtual Envt (venv1\Scripts\activate)
//  Install django Framework
        ->  Update pip (python -m pip install --upgrade pip )
        ->  Create Requitements.txt with Django virsion in it (Django~=3.2.10)
        ->  Install Django (pip install -r Requirements.txt)
//  Create Django Project in Virtual Envt (django-admin.exe startproject <mysite> .)
//  Configure Settings of Project <mysite> (Edit settings.py)
        ->  Timezone (TIME_ZONE)
        ->  Language (LANGUAGE_CODE)
        ->  Static root (STATIC_ROOT = BASE_DIR/'static')
        ->  Allowed hosts (ALLOWED_HOSTS = ['127.0.0.1','.pythonanywhere.com'])
//  Create Database in base_dir (python manage.py migrate)
//  Start Webserver (python manage.py runserver)
        ->  While Webserver us active terminal cannot be used to enter commands
        ->  Use new terminal to execute commamds
        ->  Use (Ctrl+Break) to stop Webserver
//  Check Webserver (127.0.0.01:8000 on Browser)
//  Create a separate appliacation inside project <blog> (python manage.py startapp blog)
//  Add application <blog> to list of installed apps so that Django knows that it exists 
        ->  Open settings.py
        ->  INSTALLED_APPS = [... , 'blog',]
//  Create a blog post model (Create class <post> in blog/models.py)
//  Create table for model <post> in DB 
        ->  python manage.py makemigrations blog
        ->  python manage.py migrate blog
//  Register model <post> with Django Admin (Edit blog/admin.py)
        ->      admin.register.site(Post)
//  Start WebServer (python manage.py runserver)
//  Create superuser in terminal (python manage.py createsuperuser)
//  login to django using superuser credentials (127.0.0.1:8000/admin)
//  add some blog posts{objects}
//  Deploy on internet (pythonanywhere.com)
        ->   Install Git
        ->   Configure Git Repository
                ->  $ git init (in base dir)
                ->  $ git config --global user.name "Your Name"      <admin>
                ->  $ git config --global user.email you@example.com <georgian3768@gmail.com>
        ->  Create .gitignore and add files to ignore (to ignore files)
        ->  add files to repository
                ->  $ git add . (current_dir)
                ->  $ git commit -m "<first commit>"
        ->  Push Your code to github
                ->  create a new repo on github
                ->  Push your repo to Github repo
        ->  Setup project on pythonanywhere.com
                ->  Sign up for a PythonAnywhere account
                ->  Create a PythonAnywhere API token
                ->  Configure our site on PythonAnywhere
                        ->  start a "Bash" console (From Dashboard) // Deploying a web app on PythonAnywhere involves pulling down your code from GitHub, and then configuring PythonAnywhere to recognise it and start serving it as a web application.
                        ->  Install pythonanywhere ($ pip3.8 install --user pythonanywhere)
                        ->  Configure your app from GitHub ($ pa_autoconfigure_django.py --python=3.8 https://github.com/<your-github-username>/<my-first-blog.git>)
                        ->  Create SuperUser (db.sqlite is not copied due .gitignore) ($ python manage.py createsuperuser)
//  Configure URLs for you site (mysite)
        ->  Edit mysite/urls.py
        ->  Import include from django.urls
        ->  Add blog.urls in urlpatterns[] using include() function
//  Configure URLs for you app (blog)
        ->  Create blog/urls.py
        ->  Import path from django.urls anf views from current_dir(.)
        ->  Add path to a view <post_list> into urlpattern[] (path('', views.post_list, name = 'post_list'))
//  Create views for app <blog>
        ->  define function post_list(request) in blog/views.py render
//  Create Template for view <post_list>
        ->  Create dir \blog\templates\blog
        ->  Create post_list.html in dir
//  Start Webserver and goto localhost:8000 (post_list.html is visible)
//  Deploy on internet
        ->  Push Repo to Github
                ->  git status
                ->  git add .
                ->  git commit -m "Added Html page"
                ->  git Push
        ->  Pull your code to pythonanywhere.com and reload your web app
                ->  cd ~/<user name>.pythonanywhere.com
                ->  git pull
                ->  Reload web app
//  Link models and templates using view
        ->  Import model<post> to blog/views (from .models import post)
        ->  Import timezone from django.utils
        ->  get values<posts> in model<post> using querysets (posts = post.objects.filter(published_date__lte=timezone.now()).order_by('published_date'))
        ->  Pass <posts> to template<post_list.html> by altering parameter in render function (render(request, 'blog/post_list.html', {'posts': posts} ) )  
        ->  In blog/templates/blog/post_list.html display values of <posts> using template tags
                ->  use for loop to get each entry stored in posts 
                        {% for post in posts %}
                             -----html code-----
                                {{post.published_date}}
                                {{post.title}}
                                {{post.text|linebreaksbr}}
                             -----html code-----
                        {% endfor %}
//  Deploy on internet
        ->  Push Repo to Github
                ->  git status
                ->  git add .
                ->  git commit -m "Added Html page"
                ->  git Push
        ->  Pull your code to pythonanywhere.com and reload your web app
                ->  cd ~/<user name>.pythonanywhere.com
                ->  git pull
                ->  Reload web app
// Use CSS to style up template<post_list.html>
        ->  add bootstrap to html head
        ->  create dir for static files(CSS and Images) and add CSS file (blog\static\css\blog.css)
        ->  include static in <post_list.html> ( {% load static %} )
        ->  point to blog.css ( <link rel="stylesheet" href="{% static 'css/blog.css' %}"> )
//  Template Extending
        ->  Create blog/templates/base.html
                  
                    -----html code------
                      {% block content %}
                      {% endblock %}
                    -----html code-------

        ->  in blog/templates/blog/post_list.html remove evrything except enclosed in 
                     {% for postm in posts %} 
                     -----htmlcode----
                      {% endfor %}
        ->  add     {% extends 'blog/base.html' %} , {% block content %}, {% endblock %}
//  Extend your app<blog> (add post_detail template)
        ->  create template link to <post_detail> in <post_list>
                ->  <a href="{% url 'post_detail' pk=post.pk %}">{{ post.title }}</a>
        ->  cadd urlpattern to <post_detail> in blog/urls.py
                ->  path('post/<int:pk>/', views.post_detail, name='post_detail'),
        ->  add view <post_detail(request, pk)> to blog/views.py
                ->  import get_object_or_404 from django.shortcuts
                ->  get <post_detl> value from model<post> (post_detl = get_object_or_404(post, pk=pk))
                ->  return the rendered template (render(request, 'blog/post_detail.html', {'post_detl':post_detl}))
        ->  add template <post_detail>
                ->  create blog/templates/blog/post_detail.html
                ->  extend 'blog/base.html'
                ->  put html code within {% block content%} using {{post_detl}} 
//  Deploy on internet
        ->  Push Repo to Github
                ->  git status
                ->  git add .
                ->  git commit -m "Added Html page"
                ->  git Push
        ->  Pull your code to pythonanywhere.com and reload your web app
                ->  cd ~/<user name>.pythonanywhere.com
                ->  git pull
        ->  Update the static files on the server
                ->  workon <your-pythonanywhere-domain>.pythonanywhere.com
                ->  python manage.py collectstatic
                ->  Reload web app
        
                
